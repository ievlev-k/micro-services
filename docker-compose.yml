#  docker-compose up -d --no-deps --build
version: "3.0"

networks:
  test:

services:
  #  test_app:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #      target: run_test
  #    volumes:
  #      - /var/run/docker.sock:/var/run/docker.sock
  #    network_mode: host
  #
  #  app:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #      target: run
  #    ports:
  #      - "18080:8090"
  #    environment:
  #      spring.datasource.url: "jdbc:postgresql://db:5432/postgres"
  #    depends_on:
  #      test_app:
  #        condition: service_completed_successfully
  #      db:
  #        condition: service_healthy
  #    networks:
  #      - test
  #  #    network_mode: host

  #  user_db:
  #    image: postgres:14
  #    container_name: user_db
  #    ports:
  #      - "5002:5432"
  #    environment:
  #      - POSTGRES_PASSWORD=postgres
  #      - POSTGRES_USER=postgres
  #      - POSTGRES_DB=postgres

  config:
    build:
      context: config
      dockerfile: Dockerfile
      target: run
    container_name: config
    ports:
      - "4566:4566"
    networks:
      - test



  eureka:
    build:
      context: eureka-server
      dockerfile: Dockerfile
      target: run
    container_name: eureka
    ports:
      - "8081:8081"
    environment:
      eureka.client.service-url.defaultZone: http://localhost:8081/eureka
      spring.config.import: configserver:http://config:8888
    depends_on:
      - config
    networks:
      - test

  gateway:
    build:
      context: gateway
      dockerfile: Dockerfile
      target: run
    container_name: gateway
    ports:
      - "8082:8082"
    environment:
      eureka.client.service-url.defaultZone: http://eureka:8081/eureka
      spring.config.import: configserver:http://config:8888
    depends_on:
      - eureka
      - config
    networks:
      - test
  #
  product:
    build:
      context: product-server
      dockerfile: Dockerfile
      target: run
    container_name: product
    depends_on:
      - config
      - eureka
      - db
    ports:
      - "8084:8084"
    networks:
      - test
  #    environment:
  #      eureka.client.service-url.defaultZone: http://eureka:8081/eureka
  #      spring.datasource.url: jdbc:postgresql://db:5432/postgres
  #      spring.config.import: configserver:http://config:8888
  #
  #      pushgateway.base-url: 172.17.0.1:9092
  #      spring.zipkin.baseUrl: http://172.17.0.1:9411
  #    command: sh wait-for.sh config:8888 -- java -jar application.jar
  #
  order:
    build:
      context: order-server
      dockerfile: Dockerfile
      target: run
    container_name: order
    depends_on:
      - config
      - eureka
      - db
    ports:
      - "8085:8085"
    networks:
      - test
  #    environment:
  #      eureka.client.service-url.defaultZone: http://eureka:8081/eureka
  #      spring.config.import: configserver:http://config:8888
  ##      spring.datasource.url: jdbc:postgresql://db:5432/postgres
  #
  user:
    build:
      context: user-server
      dockerfile: Dockerfile
      target: run
    container_name: user
    depends_on:
      - config
      - eureka
      - db
    ports:
      - "8086:8086"
    networks:
      - test


  user_tests:
    build:
      context: user-server
      dockerfile: Dockerfile
      target: test
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      spring.config.import: configserver:http://localhost:8888
    network_mode: host


  db:
    image: postgres:14
    container_name: db
    ports:
      - "5002:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    networks:
      - test
#    depends_on:
#      test_app:
#        condition: service_completed_successfully
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
